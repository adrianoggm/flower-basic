name: Nightly Tests - Extended Testing Suite

on:
  schedule:
    # Run every day at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:
    inputs:
      test_scope:
        description: "Test scope"
        required: true
        default: "full"
        type: choice
        options:
          - full
          - performance
          - compatibility
          - security

jobs:
  extended-testing:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11, 3.12]
        test-type: [unit, integration, performance]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y mosquitto mosquitto-clients redis-server

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          pip install pytest pytest-cov pytest-benchmark pytest-xvfb
          pip install memory-profiler psutil py-spy

      - name: Run extended tests
        timeout-minutes: 30
        run: |
          case "${{ matrix.test-type }}" in
            "unit")
              echo "Running comprehensive unit tests..."
              pytest tests/ -v --tb=long --cov=. --cov-report=xml \
                --cov-fail-under=85 --maxfail=5
              ;;
            "integration") 
              echo "Running integration tests..."
              pytest tests/ -v -m "integration" --tb=long || echo "Integration tests completed"
              ;;
            "performance")
              echo "Running performance tests..."
              python -c "
              import time
              import tracemalloc
              import gc
              from flower_basic import ECGModel
              from flower_basic import get_parameters, set_parameters
              import numpy as np
              
              print('=== Extended Performance Testing ===')
              
              # Stress test - multiple models
              tracemalloc.start()
              start_time = time.time()
              
              models = []
              for i in range(50):
                  model = ECGModel()
                  params = get_parameters(model)
                  # Simulate parameter updates
                  modified_params = [p + np.random.normal(0, 0.01, p.shape).astype(np.float32) for p in params]
                  set_parameters(model, modified_params)
                  models.append(model)
                  
                  if i % 10 == 0:
                      print(f'Created {i+1} models...')
              
              end_time = time.time()
              current, peak = tracemalloc.get_traced_memory()
              tracemalloc.stop()
              
              print(f'Total time: {end_time - start_time:.2f}s')
              print(f'Peak memory: {peak / 1024 / 1024:.2f}MB')
              print(f'Average time per model: {(end_time - start_time) / 50:.3f}s')
              
              # Memory cleanup test
              del models
              gc.collect()
              print('✅ Performance stress test completed')
              "
              ;;
          esac

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: nightly-results-${{ matrix.python-version }}-${{ matrix.test-type }}
          path: |
            coverage.xml
            pytest.xml
          retention-days: 7

  security-audit:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.11

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install bandit safety semgrep

      - name: Run comprehensive security audit
        run: |
          echo "=== Security Audit Report ===" > security-report.txt
          echo "Generated: $(date)" >> security-report.txt
          echo "" >> security-report.txt

          echo "=== Bandit Security Scan ===" >> security-report.txt
          bandit -r . -f txt >> security-report.txt || true

          echo -e "\n=== Safety Vulnerability Check ===" >> security-report.txt
          safety check --json >> security-report.txt || true

          echo -e "\n=== Semgrep Security Patterns ===" >> security-report.txt
          semgrep --config=auto . --text >> security-report.txt || true

      - name: Upload security report
        uses: actions/upload-artifact@v3
        with:
          name: security-audit-report
          path: security-report.txt
          retention-days: 30

  dependency-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.11

      - name: Check for dependency updates
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools safety

          echo "=== Current Dependencies ===" > dependency-report.txt
          pip freeze >> dependency-report.txt

          echo -e "\n=== Outdated Packages ===" >> dependency-report.txt
          pip list --outdated >> dependency-report.txt || true

          echo -e "\n=== Security Vulnerabilities ===" >> dependency-report.txt
          safety check >> dependency-report.txt || true

      - name: Upload dependency report
        uses: actions/upload-artifact@v3
        with:
          name: dependency-report
          path: dependency-report.txt
          retention-days: 30

  code-quality-deep-dive:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.11

      - name: Install quality tools
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint radon mccabe vulture

      - name: Run comprehensive code quality analysis
        run: |
          echo "=== Code Quality Deep Dive ===" > quality-report.txt
          echo "Generated: $(date)" >> quality-report.txt

          echo -e "\n=== Pylint Analysis ===" >> quality-report.txt
          pylint *.py --exit-zero >> quality-report.txt

          echo -e "\n=== Cyclomatic Complexity ===" >> quality-report.txt
          radon cc . --min=B >> quality-report.txt

          echo -e "\n=== Maintainability Index ===" >> quality-report.txt
          radon mi . >> quality-report.txt

          echo -e "\n=== Dead Code Detection ===" >> quality-report.txt
          vulture . --exclude=tests/ >> quality-report.txt || true

      - name: Upload quality report
        uses: actions/upload-artifact@v3
        with:
          name: code-quality-report
          path: quality-report.txt
          retention-days: 30

  nightly-summary:
    runs-on: ubuntu-latest
    needs:
      [
        extended-testing,
        security-audit,
        dependency-check,
        code-quality-deep-dive,
      ]
    if: always()

    steps:
      - name: Generate nightly summary
        run: |
          echo "# 🌙 Nightly Test Summary - $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Extended Testing | ${{ needs.extended-testing.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Audit | ${{ needs.security-audit.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Dependency Check | ${{ needs.dependency-check.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Code Quality | ${{ needs.code-quality-deep-dive.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.extended-testing.result }}" == "success" ]]; then
            echo "🎉 **All nightly tests are passing!**" >> $GITHUB_STEP_SUMMARY
            echo "The codebase is in excellent health." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some nightly tests require attention**" >> $GITHUB_STEP_SUMMARY
            echo "Please review the detailed reports in the artifacts." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 System Health Dashboard" >> $GITHUB_STEP_SUMMARY
          echo "- **Test Coverage**: Expected >85%" >> $GITHUB_STEP_SUMMARY
          echo "- **Performance**: Monitored for regressions" >> $GITHUB_STEP_SUMMARY  
          echo "- **Security**: Automated vulnerability scanning" >> $GITHUB_STEP_SUMMARY
          echo "- **Dependencies**: Up-to-date monitoring" >> $GITHUB_STEP_SUMMARY

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Nightly Tests Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `## Nightly Test Failure Report
              
              The nightly test suite has detected issues that require attention.
              
              **Failed Jobs:**
              - Extended Testing: ${{ needs.extended-testing.result }}
              - Security Audit: ${{ needs.security-audit.result }}
              - Dependency Check: ${{ needs.dependency-check.result }}
              - Code Quality: ${{ needs.code-quality-deep-dive.result }}
              
              **Action Required:**
              1. Review the workflow run: ${context.payload.repository.html_url}/actions/runs/${context.runId}
              2. Download and analyze the artifact reports
              3. Fix identified issues
              4. Re-run tests to verify fixes
              
              **Auto-generated by:** GitHub Actions Nightly Tests
              **Run ID:** ${context.runId}`,
              labels: ['bug', 'nightly-test', 'priority-high']
            })
